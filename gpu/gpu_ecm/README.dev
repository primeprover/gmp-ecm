GPU-ECM is organized as follow:
  -def.h: contains 
  -main.c: read options and input files, initialize variables, do the
           precomputations and call the cuda_Main function in cudakernel.cu
  -utils.c and utils.h: Usefull C functions.
  -cudakernel.cu and cudakernel.h: the actual Cuda code for the GPU.

C files are compiled with gcc and Cuda files with nvcc (see Makefile)

**********

check.sh is a shell program that checks that the output of GPU-ECM is correct.

Its usage is:
./check.sh [B1=4096 [n=0 [s=424242]]]
where B1, n and s correspond to the option of GPU-ECM.

**********

Some stuff about the implementation of the arithmetic of multi precision
integer.
N is the number we want to factor, B=2^(MAX_BITS)
One want 64N<B (ie N has at most MAX_BITS-6 bits).
An integer A mod N is represented in [0..3N[.
So, after an addition, 0 <= A+B < 6N.
For the substraction, we compute A-B by doing (A+3N)-B which is in [0..6N[.
We also do a multiplication after on add or a sub. Thanks to
Montogomery-Svoboda* one know that 
      REDC(A*B) < (36N^2+2*N*B)/B < (N*B + 2*N*B)/B <= 3*N 

The case of the multiplication by 2 at the end is a little bit different, but
the results is the same: it is not necessary to do any modular operation.

*Svoboda is not yet implemented

**********

Please report to Cyril.Bouvier@loria.fr any problems, bugs, ...

